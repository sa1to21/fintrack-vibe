import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, CallbackQuery, FSInputFile
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://financetrack21.netlify.app')
API_URL = os.getenv('API_URL', 'http://localhost:3000')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
TEXTS = {
    'ru': {
        'start_welcome': 'ü¶â –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiseTrack!',
        'start_description': '''–£–ø—Ä–∞–≤–ª—è–π —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.

üìå –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
‚Ä¢ /guide - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ /tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
‚Ä¢ /why - –ó–∞—á–µ–º –Ω—É–∂–µ–Ω —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤?

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá''',
        'button_open': 'üí∞ –û—Ç–∫—Ä—ã—Ç—å WiseTrack',
        'button_help': '‚ùì –ü–æ–º–æ—â—å',
        'language_select': 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:',
        'language_changed': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
        'button_lang_ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'button_lang_en': 'üá¨üáß English',
        'help_text': '''üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ WiseTrack:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/guide - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
/why - –ó–∞—á–µ–º –Ω—É–∂–µ–Ω —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤
/tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
/language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
/support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá''',
        'tips_text': '''üí° –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤:

üìå –ó–∞–∫—Ä–µ–ø–∏ —á–∞—Ç —Å–æ –º–Ω–æ–π –≤–≤–µ—Ä—Ö—É —Å–ø–∏—Å–∫–∞ Telegram, —á—Ç–æ–±—ã —è –±—ã–ª –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π.

‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!

üìä –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É –≤ —É—á–µ—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ó–∞–Ω–æ—Å–∏ —Ç—Ä–∞—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ.

ü§ù <a href="https://t.me/share/url?url=https://t.me/WiseTrackAppBot">–ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏</a> - –≤–º–µ—Å—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –≤–µ—Å–µ–ª–µ–µ!

üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω–∞—à—ë–ª –æ—à–∏–±–∫—É? –ü–∏—à–∏ @sa1to21''',
        'why_text': '''üéØ –ó–∞—á–µ–º –Ω—É–∂–µ–Ω —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤?

üí™ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–µ–Ω—å–≥–∞–º–∏</b>
–¢—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥ –∏ –∫—É–¥–∞ –æ–Ω–∏ —É—Ö–æ–¥—è—Ç. –ù–∏–∫–∞–∫–∏—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞.

üéÅ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π</b>
–•–æ—á–µ—à—å –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫, –º–∞—à–∏–Ω—É –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É? –£—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Å—É–º–º—ã.

‚úÇÔ∏è <b>–ò–∑–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç</b>
–ö–æ–≥–¥–∞ –≤–∏–¥–∏—à—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å—Ä–∞–∑—É –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞ —á—Ç–æ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏ –≤–ø—É—Å—Ç—É—é. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å –±–µ–∑ —É—â–µ—Ä–±–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.''',
        'guide_title': '''üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º WiseTrack

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:''',
        'guide_accounts_btn': 'üí≥ –°—á–µ—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        'guide_currency_btn': 'üí± –í–∞–ª—é—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'guide_debt_btn': 'üìâ –ü–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π',
        'guide_categories_btn': 'üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
        'guide_filters_btn': 'üîç –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫',
        'guide_export_btn': 'üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
        'guide_edit_btn': '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π',
        'guide_notifications_btn': 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö',
        'guide_back_btn': '‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º',
        'guide_accounts': '''üí≥ –°—á–µ—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

‚Ä¢ –ù–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ 4 —Å—á–µ—Ç–∞
‚Ä¢ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫:
  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏ ‚Üí –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏
‚Ä¢ –í—Å–µ —Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏"''',
        'guide_currency': '''üí± –í–∞–ª—é—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –≤ –≤–∞–ª—é—Ç–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ä—É–±–ª—å (‚ÇΩ)
‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
‚Ä¢ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö''',
        'guide_debt': '''üìâ –ü–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞:
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é "–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–∞—Å–∏—Ç–µ –¥–æ–ª–≥ (–∏—Å—Ç–æ—á–Ω–∏–∫)
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥–æ–≤–æ–π —Å—á–µ—Ç (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)
4. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–≥–∞—à–µ–Ω–∏—è

‚ö†Ô∏è –í–∞–∂–Ω–æ: –¢–∞–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤''',
        'guide_categories': '''üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
‚Ä¢ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
‚Ä¢ –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏:
‚Ä¢ 60+ —ç–º–æ–¥–∑–∏ –Ω–∞ –≤—ã–±–æ—Ä
‚Ä¢ –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤''',
        'guide_filters': '''üîç –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫

–î–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π":

–§–∏–ª—å—Ç—Ä—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É:
‚Ä¢ –í—Å—ë –≤—Ä–µ–º—è / –ù–µ–¥–µ–ª—è / –ú–µ—Å—è—Ü / 3 –º–µ—Å—è—Ü–∞ / –ì–æ–¥
‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–≤—ã–±–æ—Ä –¥–∞—Ç)

–§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É:
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –¢–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥—ã
‚Ä¢ –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥—ã

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –§–∏–ª—å—Ç—Ä –ø–æ —Å—á–µ—Ç–∞–º (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤''',
        'guide_export': '''üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

–ö–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
3. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–î–∞–Ω–Ω—ã–µ"
4. –ù–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"

–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —ç–∫—Å–ø–æ—Ä—Ç:
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –¢–∏–ø (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥/–ø–µ—Ä–µ–≤–æ–¥)
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è
‚Ä¢ –°—á—ë—Ç
‚Ä¢ –°—É–º–º–∞
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ

–§–æ—Ä–º–∞—Ç: CSV (UTF-8)
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: Excel, Google Sheets, Numbers''',
        'guide_edit': '''‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π

–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:
1. –û—Ç–∫—Ä–æ–π—Ç–µ "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
3. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã:
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"

–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –¢–∏–ø –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
‚Ä¢ –°—á—ë—Ç –∏ —Å—É–º–º–∞
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)''',
        'guide_notifications': '''üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–µ—Å—Ç–∏ —É—á—ë—Ç:

–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
2. –í–∫–ª—é—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
3. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –≤–∞—à–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ)
4. –£–∫–∞–∂–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–ß—Ç–æ –±—É–¥–µ—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è

‚è∞ –í–∞–∂–Ω–æ: –í—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞''',
        'version_text': '''WiseTrack v1.0 (BETA) üöÄ
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 30 –æ–∫—Ç—è–±—Ä—è 2025
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá''',
        'donate_text': '''üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç WiseTrack

–ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¥–æ–Ω–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!

–°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:

üí≥ –°–ë–ü (–¢-–±–∞–Ω–∫)
`+79939009598`

üè¶ TBC Bank IBAN (—Ç–æ–ª—å–∫–æ GEL)
`GE15TB7537945061200012`

üíé TON
`UQBagnAhrTd6AJbQg8zfP9oyIFU_8a5RgX_78k64jBVxLLEJ`

üíµ USDT (TRC20)
`TSG71BQmZL2E6q46u39PfUQSjaWNcENmRm`''',
        'support_text': '''üí¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WiseTrack

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ:

üë§ @sa1to21

–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!''',
        'any_message_text': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá',
    },
    'en': {
        'start_welcome': 'ü¶â Welcome to WiseTrack!',
        'start_description': '''Manage your finances easily and conveniently through the Telegram app.

üìå Useful commands:
‚Ä¢ /help - List of all bot commands
‚Ä¢ /guide - Guide to app features
‚Ä¢ /tips - Useful tips for using
‚Ä¢ /why - Why track your finances?

Click the button below to get started üëá''',
        'button_open': 'üí∞ Open WiseTrack',
        'button_help': '‚ùì Help',
        'language_select': 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:',
        'language_changed': '‚úÖ Language changed to English',
        'button_lang_ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'button_lang_en': 'üá¨üáß English',
        'help_text': '''üìö WiseTrack Commands List:

/start - Launch the app
/help - Commands list
/guide - Feature guide
/why - Why track finances
/tips - Useful tips
/language - Change language
/version - Version information
/donate - Support the project
/support - Technical support

Click the button below to open the app üëá''',
        'tips_text': '''üí° Some useful tips:

üìå Pin this chat at the top of your Telegram list to keep me handy.

‚úçÔ∏è Record transactions right away when they happen. It only takes a few seconds!

üìä Consistency is key to successful finance tracking. Record expenses regularly.

ü§ù <a href="https://t.me/share/url?url=https://t.me/WiseTrackAppBot">Share the bot with friends</a> - managing finances together is more fun!

üí¨ Have questions or found a bug? Contact @sa1to21''',
        'why_text': '''üéØ Why track your finances?

üí™ <b>Control over money</b>
You always know how much money you have and where it goes. No surprises at the end of the month.

üéÅ <b>Achieving goals</b>
Want to save for a vacation, car, or apartment? Finance tracking helps you plan and save the right amounts.

‚úÇÔ∏è <b>Eliminating unnecessary expenses</b>
When you see the statistics, it's immediately clear where money is wasted. This helps you save without compromising your quality of life.''',
        'guide_title': '''üìñ WiseTrack Feature Guide

Choose a topic of interest:''',
        'guide_accounts_btn': 'üí≥ Accounts and display order',
        'guide_currency_btn': 'üí± Currency and statistics',
        'guide_debt_btn': 'üìâ Debt repayment',
        'guide_categories_btn': 'üè∑Ô∏è Category management',
        'guide_filters_btn': 'üîç Filters and search',
        'guide_export_btn': 'üíæ Data export',
        'guide_edit_btn': '‚úèÔ∏è Editing transactions',
        'guide_notifications_btn': 'üîî Finance reminders',
        'guide_back_btn': '‚Üê Back to topics',
        'guide_accounts': '''üí≥ Accounts and display order

‚Ä¢ The main screen displays the first 4 accounts
‚Ä¢ To change the order:
  Settings ‚Üí Account Management ‚Üí drag cards
‚Ä¢ All accounts are available on the "Account Management" page''',
        'guide_currency': '''üí± Currency and statistics

‚Ä¢ Statistics are calculated only for transactions in the currency from settings
‚Ä¢ Default currency: ruble (‚ÇΩ)
‚Ä¢ Transactions in other currencies are not included in charts and analytics
‚Ä¢ You can always change the currency for statistics in settings''',
        'guide_debt': '''üìâ Debt repayment

The correct way to repay debt:
1. Open "Transfer between accounts" function
2. Select the account from which you repay the debt (source)
3. Select the debt account (recipient)
4. Specify the repayment amount

‚ö†Ô∏è Important: Such transfers are included in expense statistics''',
        'guide_categories': '''üè∑Ô∏è Category management

How to customize categories:
‚Ä¢ Settings ‚Üí Category Management
‚Ä¢ You can create new categories
‚Ä¢ You can edit existing ones
‚Ä¢ You can delete them (if there are no linked transactions)

Customization options:
‚Ä¢ 60+ emojis to choose from
‚Ä¢ Separate categories for income and expenses''',
        'guide_filters': '''üîç Filters and search

Available in the "Transaction History" section:

Period filters:
‚Ä¢ All time / Week / Month / 3 months / Year
‚Ä¢ Custom period (date selection)

Type filters:
‚Ä¢ All transactions
‚Ä¢ Income only
‚Ä¢ Expenses only
‚Ä¢ Transfers only

Additionally:
‚Ä¢ Filter by accounts (one or several)
‚Ä¢ Search by description and category
‚Ä¢ Combination of all filters''',
        'guide_export': '''üíæ Data export

How to export transactions:
1. Open the app
2. Go to Settings
3. Find the "Data" section
4. Click "Export data"

What's included in the export:
‚Ä¢ Transaction date and time
‚Ä¢ Type (income/expense/transfer)
‚Ä¢ Category
‚Ä¢ Account
‚Ä¢ Amount
‚Ä¢ Description

Format: CSV (UTF-8)
Usage: Excel, Google Sheets, Numbers''',
        'guide_edit': '''‚úèÔ∏è Editing transactions

How to edit or delete a transaction:
1. Open "Transaction History"
2. Click on the desired transaction
3. In the opened window you can:
   ‚Ä¢ View all details
   ‚Ä¢ Click "Delete transaction" button

What you can view:
‚Ä¢ Transaction date and time
‚Ä¢ Type and category
‚Ä¢ Account and amount
‚Ä¢ Description (if any)''',
        'guide_notifications': '''üîî Finance reminders

Set up daily notifications to record expenses so you don't forget to keep track:

How to set up:
1. Open Settings ‚Üí Notification Settings
2. Enable notifications
3. Choose a convenient time (in your local timezone)
4. Specify days of the week for reminders

What will be in the notification:
‚Ä¢ Reminder to record daily expenses
‚Ä¢ Last transaction

‚è∞ Important: Time is automatically determined by your device's timezone''',
        'version_text': '''WiseTrack v1.0 (BETA) üöÄ
Last update: October 30, 2025
The app is in beta testing. Your feedback is very important!

Click the button below to open the app üëá''',
        'donate_text': '''üíù Support WiseTrack Project

The project is completely free and developed through donations. Thank you for your support!

Support methods:

üí≥ SBP (T-Bank)
`+79939009598`

üè¶ TBC Bank IBAN (GEL only)
`GE15TB7537945061200012`

üíé TON
`UQBagnAhrTd6AJbQg8zfP9oyIFU_8a5RgX_78k64jBVxLLEJ`

üíµ USDT (TRC20)
`TSG71BQmZL2E6q46u39PfUQSjaWNcENmRm`''',
        'support_text': '''üí¨ WiseTrack Technical Support

If you have questions, found a bug, or have suggestions for improving the app, contact:

üë§ @sa1to21

I'll try to respond as soon as possible!''',
        'any_message_text': 'Use /help for reference or open the app üëá',
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def get_text(user_lang: str, key: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –µ—Å–ª–∏ —è–∑—ã–∫ ru, –∏–Ω–∞—á–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"""
    lang = 'ru' if user_lang == 'ru' else 'en'
    return TEXTS[lang].get(key, '')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
async def get_user_language(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/v1/users/telegram/{telegram_id}") as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('language_code', None)
    except Exception as e:
        print(f"Error fetching user language: {e}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def save_user_language(telegram_id: int, language_code: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.patch(
                f"{API_URL}/api/v1/users/telegram/{telegram_id}",
                json={"language_code": language_code}
            ) as response:
                return response.status == 200
    except Exception as e:
        print(f"Error saving user language: {e}")
        return False

# –ö–µ—à –¥–ª—è file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
welcome_photo_file_id = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def get_webapp_keyboard(lang: str = 'ru', url: str = WEBAPP_URL, show_help: bool = True) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(
        text=get_text(lang, 'button_open'),
        web_app=WebAppInfo(url=url)
    )]]

    if show_help:
        buttons.append([InlineKeyboardButton(
            text=get_text(lang, 'button_help'),
            callback_data="show_help"
        )])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    global welcome_photo_file_id

    telegram_id = message.from_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –ë–î
    lang = await get_user_language(telegram_id)

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if not lang:
        detected_lang = message.from_user.language_code or 'en'
        lang = 'ru' if detected_lang == 'ru' else 'en'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫
        await save_user_language(telegram_id, lang)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    keyboard = get_webapp_keyboard(lang)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    caption_text = f"{get_text(lang, 'start_welcome')}\n\n{get_text(lang, 'start_description')}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if welcome_photo_file_id:
        await message.answer_photo(
            photo=welcome_photo_file_id,
            caption=caption_text,
            reply_markup=keyboard
        )
    else:
        # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        image_path = os.path.join(os.path.dirname(__file__), "..", "images", "Welcome FinTrack.png")
        photo = FSInputFile(image_path)

        sent_message = await message.answer_photo(
            photo=photo,
            caption=caption_text,
            reply_markup=keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        welcome_photo_file_id = sent_message.photo[-1].file_id

    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, 'button_lang_ru'), callback_data="set_lang_ru")],
        [InlineKeyboardButton(text=get_text(lang, 'button_lang_en'), callback_data="set_lang_en")]
    ])
    await message.answer(get_text(lang, 'language_select'), reply_markup=language_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /language - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
@dp.message(Command("language"))
async def cmd_language(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, 'button_lang_ru'), callback_data="set_lang_ru")],
        [InlineKeyboardButton(text=get_text(lang, 'button_lang_en'), callback_data="set_lang_en")]
    ])

    await message.answer(get_text(lang, 'language_select'), reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("set_lang_"))
async def handle_language_change(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    new_lang = callback.data.split("_")[2]  # set_lang_ru -> ru

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
    success = await save_user_language(telegram_id, new_lang)

    if success:
        await callback.message.edit_text(get_text(new_lang, 'language_changed'))
    else:
        await callback.message.edit_text("‚ùå Error saving language")

    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /help - –°–ø—Ä–∞–≤–∫–∞
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang, show_help=False)
    await message.answer(get_text(lang, 'help_text'), reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
@dp.message(Command("tips"))
async def cmd_tips(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang)
    await message.answer(
        get_text(lang, 'tips_text'),
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /why - –ó–∞—á–µ–º –Ω—É–∂–µ–Ω —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤
@dp.message(Command("why"))
async def cmd_why(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang)
    await message.answer(
        get_text(lang, 'why_text'),
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /guide - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
@dp.message(Command("guide"))
async def cmd_guide(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, 'guide_accounts_btn'), callback_data="guide_accounts")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_currency_btn'), callback_data="guide_currency")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_debt_btn'), callback_data="guide_debt")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_categories_btn'), callback_data="guide_categories")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_filters_btn'), callback_data="guide_filters")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_export_btn'), callback_data="guide_export")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_edit_btn'), callback_data="guide_edit")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_notifications_btn'), callback_data="guide_notifications")],
        [InlineKeyboardButton(text=get_text(lang, 'button_open'), web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text=get_text(lang, 'button_help'), callback_data="show_help")]
    ])
    await message.answer(
        get_text(lang, 'guide_title'),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.callback_query(F.data == "show_help")
async def handle_help_callback(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang, show_help=False)
    await callback.message.answer(get_text(lang, 'help_text'), reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("guide_") & ~F.data.in_(["guide_back"]))
async def handle_guide_callback(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    topic = callback.data.split("_")[1]

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, 'guide_back_btn'), callback_data="guide_back")],
        [InlineKeyboardButton(text=get_text(lang, 'button_open'), web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text=get_text(lang, 'button_help'), callback_data="show_help")]
    ])

    await callback.message.edit_text(
        get_text(lang, f'guide_{topic}'),
        reply_markup=back_keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ
@dp.callback_query(F.data == "guide_back")
async def handle_guide_back(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, 'guide_accounts_btn'), callback_data="guide_accounts")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_currency_btn'), callback_data="guide_currency")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_debt_btn'), callback_data="guide_debt")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_categories_btn'), callback_data="guide_categories")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_filters_btn'), callback_data="guide_filters")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_export_btn'), callback_data="guide_export")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_edit_btn'), callback_data="guide_edit")],
        [InlineKeyboardButton(text=get_text(lang, 'guide_notifications_btn'), callback_data="guide_notifications")],
        [InlineKeyboardButton(text=get_text(lang, 'button_open'), web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text=get_text(lang, 'button_help'), callback_data="show_help")]
    ])
    await callback.message.edit_text(
        get_text(lang, 'guide_title'),
        reply_markup=keyboard
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
@dp.message(Command("version"))
async def cmd_version(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang)
    await message.answer(get_text(lang, 'version_text'), reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
@dp.message(Command("donate"))
async def cmd_donate(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang, f"{WEBAPP_URL}/settings")
    await message.answer(get_text(lang, 'donate_text'), parse_mode="Markdown", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message(Command("support"))
async def cmd_support(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang)
    await message.answer(get_text(lang, 'support_text'), reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_any_message(message: types.Message):
    telegram_id = message.from_user.id
    lang = await get_user_language(telegram_id) or 'en'

    keyboard = get_webapp_keyboard(lang)
    await message.answer(
        get_text(lang, 'any_message_text'),
        reply_markup=keyboard
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("Bot WiseTrack started!")
    print(f"WebApp URL: {WEBAPP_URL}")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
