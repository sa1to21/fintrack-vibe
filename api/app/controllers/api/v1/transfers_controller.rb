module Api
  module V1
    class TransfersController < BaseController
      # POST /api/v1/transfers
      def create
        from_account = current_user.accounts.find_by(id: transfer_params[:from_account_id])
        to_account = current_user.accounts.find_by(id: transfer_params[:to_account_id])

        unless from_account && to_account
          return render json: { error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, status: :not_found
        end

        if from_account.id == to_account.id
          return render json: { error: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç' }, status: :unprocessable_entity
        end

        amount = transfer_params[:amount].to_f

        if amount <= 0
          return render json: { error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è' }, status: :unprocessable_entity
        end

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if from_account.balance < amount
          return render json: {
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
            details: ['–ù–∞ —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞']
          }, status: :unprocessable_entity
        end

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        ActiveRecord::Base.transaction do
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–≤—è–∑–∏ –¥–≤—É—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          transfer_id = SecureRandom.uuid

          # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –Ω–∞ —Å—á–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
          expense = from_account.transactions.create!(
            amount: amount,
            transaction_type: 'expense',
            description: transfer_params[:description] || '',
            date: Date.today,
            time: Time.current,
            category_id: get_transfer_category.id,
            transfer_id: transfer_id
          )

          # –°–æ–∑–¥–∞–µ–º –¥–æ—Ö–æ–¥ –Ω–∞ —Å—á–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          income = to_account.transactions.create!(
            amount: amount,
            transaction_type: 'income',
            description: transfer_params[:description] || '',
            date: Date.today,
            time: Time.current,
            category_id: get_transfer_category.id,
            transfer_id: transfer_id
          )

          # –°–≤—è–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          expense.update!(paired_transaction_id: income.id)
          income.update!(paired_transaction_id: expense.id)

          render json: {
            success: true,
            from_transaction: TransactionSerializer.new(expense).as_json,
            to_transaction: TransactionSerializer.new(income).as_json,
            from_account: { id: from_account.id, balance: from_account.reload.balance },
            to_account: { id: to_account.id, balance: to_account.reload.balance }
          }, status: :created
        end
      rescue ActiveRecord::RecordInvalid => e
        render json: {
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
          details: e.record.errors.full_messages
        }, status: :unprocessable_entity
      end

      private

      def transfer_params
        params.require(:transfer).permit(:from_account_id, :to_account_id, :amount, :description)
      end

      def get_transfer_category
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–µ—Ä–µ–≤–æ–¥"
        current_user.categories.find_or_create_by!(
          name: '–ü–µ—Ä–µ–≤–æ–¥',
          category_type: 'expense'
        ) do |category|
          category.icon = 'üîÑ'
        end
      end
    end
  end
end
